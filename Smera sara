<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Mental Health Monitoring System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .header h1 {
            color: #4a5568;
            font-size: 2.5rem;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header p {
            color: #718096;
            font-size: 1.1rem;
        }

        .main-interface {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .analysis-panel {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .panel-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e2e8f0;
        }

        .panel-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            color: white;
            font-size: 1.2rem;
        }

        .panel-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #4a5568;
        }

        .voice-controls {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 50px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-secondary {
            background: #e2e8f0;
            color: #4a5568;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        .btn:active {
            transform: translateY(0);
        }

        .recording-indicator {
            display: none;
            align-items: center;
            gap: 10px;
            color: #e53e3e;
            font-weight: 600;
            margin-top: 15px;
        }

        .recording-dot {
            width: 12px;
            height: 12px;
            background: #e53e3e;
            border-radius: 50%;
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.2); }
            100% { opacity: 1; transform: scale(1); }
        }

        .waveform {
            height: 100px;
            background: #f7fafc;
            border-radius: 10px;
            margin: 20px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 2px dashed #cbd5e0;
        }

        .waveform.active {
            background: linear-gradient(45deg, #667eea22, #764ba222);
            border-color: #667eea;
        }

        .camera-container {
            position: relative;
            background: #000;
            border-radius: 15px;
            overflow: hidden;
            margin-bottom: 20px;
            height: 240px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .camera-placeholder {
            color: #a0aec0;
            font-size: 1.1rem;
            text-align: center;
        }

        .camera-active {
            background: linear-gradient(45deg, #2d3748, #4a5568);
        }

        .emotion-display {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin-top: 15px;
        }

        .emotion-tag {
            padding: 8px 12px;
            background: #f7fafc;
            border-radius: 25px;
            text-align: center;
            font-size: 0.9rem;
            font-weight: 500;
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .emotion-tag.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .chat-section {
            grid-column: 1 / -1;
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .chat-messages {
            height: 300px;
            overflow-y: auto;
            border: 2px solid #e2e8f0;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            background: #f7fafc;
        }

        .message {
            margin-bottom: 15px;
            padding: 12px 18px;
            border-radius: 18px;
            max-width: 80%;
            animation: fadeInUp 0.3s ease;
        }

        .message.bot {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            margin-right: auto;
        }

        .message.user {
            background: #e2e8f0;
            color: #4a5568;
            margin-left: auto;
        }

        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .chat-input-container {
            display: flex;
            gap: 15px;
        }

        .chat-input {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid #e2e8f0;
            border-radius: 50px;
            font-size: 1rem;
            outline: none;
            transition: all 0.3s ease;
        }

        .chat-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .analysis-results {
            grid-column: 1 / -1;
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .result-card {
            padding: 20px;
            background: #f7fafc;
            border-radius: 15px;
            border-left: 5px solid #667eea;
            transition: all 0.3s ease;
        }

        .result-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .result-title {
            font-weight: 600;
            color: #4a5568;
            margin-bottom: 10px;
            font-size: 1.1rem;
        }

        .result-value {
            font-size: 2rem;
            font-weight: 700;
            color: #667eea;
            margin-bottom: 5px;
        }

        .result-description {
            color: #718096;
            font-size: 0.9rem;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e2e8f0;
            border-radius: 4px;
            overflow: hidden;
            margin: 10px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            transition: width 0.3s ease;
        }

        @media (max-width: 768px) {
            .main-interface {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .voice-controls {
                flex-direction: column;
            }
        }

        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-good { background: #48bb78; }
        .status-warning { background: #ed8936; }
        .status-alert { background: #e53e3e; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🧠 AI Mental Health Monitoring</h1>
            <p>Multimodal stress detection using voice, facial, and conversational analysis</p>
        </div>

        <div class="main-interface">
            <!-- Voice Analysis Panel -->
            <div class="analysis-panel">
                <div class="panel-header">
                    <div class="panel-icon">🎤</div>
                    <div class="panel-title">Voice Stress Analysis</div>
                </div>
                
                <div class="voice-controls">
                    <button class="btn btn-primary" id="recordBtn">Start Recording</button>
                    <button class="btn btn-secondary" id="stopBtn" disabled>Stop</button>
                </div>
                
                <div class="recording-indicator" id="recordingIndicator">
                    <div class="recording-dot"></div>
                    <span>Recording in progress...</span>
                </div>
                
                <div class="waveform" id="waveform">
                    <span style="color: #a0aec0;">Voice waveform will appear here</span>
                </div>
                
                <div class="emotion-display">
                    <div class="emotion-tag" data-emotion="calm">😌 Calm</div>
                    <div class="emotion-tag" data-emotion="stressed">😰 Stressed</div>
                    <div class="emotion-tag" data-emotion="anxious">😟 Anxious</div>
                </div>
            </div>

            <!-- Facial Analysis Panel -->
            <div class="analysis-panel">
                <div class="panel-header">
                    <div class="panel-icon">📹</div>
                    <div class="panel-title">Facial Expression Analysis</div>
                </div>
                
                <div class="camera-container" id="cameraContainer">
                    <div class="camera-placeholder">
                        <div>📷</div>
                        <div>Click to enable camera</div>
                    </div>
                </div>
                
                <div class="voice-controls">
                    <button class="btn btn-primary" id="cameraBtn">Enable Camera</button>
                    <button class="btn btn-secondary" id="captureBtn" disabled>Capture</button>
                </div>
                
                <div class="emotion-display">
                    <div class="emotion-tag" data-emotion="happy">😊 Happy</div>
                    <div class="emotion-tag" data-emotion="neutral">😐 Neutral</div>
                    <div class="emotion-tag" data-emotion="sad">😢 Sad</div>
                </div>
            </div>
        </div>

        <!-- Chat Interface -->
        <div class="chat-section">
            <div class="panel-header">
                <div class="panel-icon">💬</div>
                <div class="panel-title">Mental Health Chatbot</div>
            </div>
            
            <div class="chat-messages" id="chatMessages">
                <div class="message bot">
                    Hello! I'm here to help assess your mental well-being. How are you feeling today?
                </div>
            </div>
            
            <div class="chat-input-container">
                <input type="text" class="chat-input" id="chatInput" placeholder="Type your message here...">
                <button class="btn btn-primary" id="sendBtn">Send</button>
            </div>
        </div>

        <!-- Analysis Results -->
        <div class="analysis-results">
            <div class="panel-header">
                <div class="panel-icon">📊</div>
                <div class="panel-title">Mental Health Assessment Results</div>
            </div>
            
            <div class="results-grid">
                <div class="result-card">
                    <div class="result-title">Overall Stress Level</div>
                    <div class="result-value" id="stressLevel">--</div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="stressProgress" style="width: 0%"></div>
                    </div>
                    <div class="result-description">Based on multimodal analysis</div>
                </div>
                
                <div class="result-card">
                    <div class="result-title">Emotional State</div>
                    <div class="result-value" id="emotionalState">Analyzing...</div>
                    <div class="result-description">Primary detected emotion</div>
                </div>
                
                <div class="result-card">
                    <div class="result-title">Voice Confidence</div>
                    <div class="result-value" id="voiceConfidence">--</div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="voiceProgress" style="width: 0%"></div>
                    </div>
                    <div class="result-description">Voice analysis accuracy</div>
                </div>
                
                <div class="result-card">
                    <div class="result-title">Recommendations</div>
                    <div style="margin-top: 10px;">
                        <div><span class="status-indicator status-good"></span>Practice deep breathing</div>
                        <div><span class="status-indicator status-warning"></span>Consider meditation</div>
                        <div><span class="status-indicator status-alert"></span>Seek professional help if needed</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Voice Recording Functionality
        let isRecording = false;
        let mediaRecorder = null;
        let recordedChunks = [];

        const recordBtn = document.getElementById('recordBtn');
        const stopBtn = document.getElementById('stopBtn');
        const recordingIndicator = document.getElementById('recordingIndicator');
        const waveform = document.getElementById('waveform');

        recordBtn.addEventListener('click', async () => {
            if (!isRecording) {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                    mediaRecorder = new MediaRecorder(stream);
                    
                    mediaRecorder.ondataavailable = (event) => {
                        if (event.data.size > 0) {
                            recordedChunks.push(event.data);
                        }
                    };
                    
                    mediaRecorder.onstop = () => {
                        simulateVoiceAnalysis();
                    };
                    
                    mediaRecorder.start();
                    isRecording = true;
                    
                    recordBtn.disabled = true;
                    stopBtn.disabled = false;
                    recordingIndicator.style.display = 'flex';
                    waveform.classList.add('active');
                    waveform.innerHTML = '<span style="color: #667eea;">🎵 Recording audio...</span>';
                    
                } catch (error) {
                    alert('Could not access microphone. Please check permissions.');
                }
            }
        });

        stopBtn.addEventListener('click', () => {
            if (isRecording && mediaRecorder) {
                mediaRecorder.stop();
                mediaRecorder.stream.getTracks().forEach(track => track.stop());
                
                isRecording = false;
                recordBtn.disabled = false;
                stopBtn.disabled = true;
                recordingIndicator.style.display = 'none';
                waveform.classList.remove('active');
                waveform.innerHTML = '<span style="color: #667eea;">✅ Recording complete - Analyzing...</span>';
            }
        });

        // Camera Functionality
        let isCameraActive = false;
        const cameraBtn = document.getElementById('cameraBtn');
        const captureBtn = document.getElementById('captureBtn');
        const cameraContainer = document.getElementById('cameraContainer');

        cameraBtn.addEventListener('click', async () => {
            if (!isCameraActive) {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                    const video = document.createElement('video');
                    video.srcObject = stream;
                    video.autoplay = true;
                    video.style.width = '100%';
                    video.style.height = '100%';
                    video.style.objectFit = 'cover';
                    
                    cameraContainer.innerHTML = '';
                    cameraContainer.appendChild(video);
                    cameraContainer.classList.add('camera-active');
                    
                    isCameraActive = true;
                    cameraBtn.textContent = 'Disable Camera';
                    captureBtn.disabled = false;
                    
                    simulateFacialAnalysis();
                    
                } catch (error) {
                    alert('Could not access camera. Please check permissions.');
                }
            } else {
                const video = cameraContainer.querySelector('video');
                if (video && video.srcObject) {
                    video.srcObject.getTracks().forEach(track => track.stop());
                }
                cameraContainer.innerHTML = '<div class="camera-placeholder"><div>📷</div><div>Click to enable camera</div></div>';
                cameraContainer.classList.remove('camera-active');
                
                isCameraActive = false;
                cameraBtn.textContent = 'Enable Camera';
                captureBtn.disabled = true;
            }
        });

        // Chat Functionality
        const chatMessages = document.getElementById('chatMessages');
        const chatInput = document.getElementById('chatInput');
        const sendBtn = document.getElementById('sendBtn');

        const chatResponses = [
            "I understand. Can you tell me more about what's been causing you stress lately?",
            "That sounds challenging. How has this been affecting your daily routine?",
            "Thank you for sharing. On a scale of 1-10, how would you rate your overall mood today?",
            "It's important to acknowledge these feelings. Have you been getting enough sleep recently?",
            "I appreciate your openness. What activities usually help you feel better?",
            "Based on our conversation, I'm analyzing patterns in your responses. How are you feeling right now?",
        ];

        let responseIndex = 0;

        function addMessage(message, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user' : 'bot'}`;
            messageDiv.textContent = message;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function sendMessage() {
            const message = chatInput.value.trim();
            if (message) {
                addMessage(message, true);
                chatInput.value = '';
                
                // Simulate bot response
                setTimeout(() => {
                    if (responseIndex < chatResponses.length) {
                        addMessage(chatResponses[responseIndex]);
                        responseIndex++;
                    } else {
                        addMessage("Thank you for this session. I'm now generating your comprehensive mental health report.");
                        updateAnalysisResults();
                    }
                }, 1000 + Math.random() * 1000);
            }
        }

        sendBtn.addEventListener('click', sendMessage);
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Simulation Functions
        function simulateVoiceAnalysis() {
            setTimeout(() => {
                const emotions = document.querySelectorAll('.emotion-tag[data-emotion]');
                emotions.forEach(emotion => emotion.classList.remove('active'));
                
                const randomEmotion = ['calm', 'stressed', 'anxious'][Math.floor(Math.random() * 3)];
                document.querySelector(`[data-emotion="${randomEmotion}"]`).classList.add('active');
                
                waveform.innerHTML = '<span style="color: #48bb78;">✅ Voice analysis complete</span>';
                
                updateVoiceResults();
            }, 2000);
        }

        function simulateFacialAnalysis() {
            setTimeout(() => {
                const emotions = document.querySelectorAll('[data-emotion="happy"], [data-emotion="neutral"], [data-emotion="sad"]');
                emotions.forEach(emotion => emotion.classList.remove('active'));
                
                const randomEmotion = ['happy', 'neutral', 'sad'][Math.floor(Math.random() * 3)];
                document.querySelector(`[data-emotion="${randomEmotion}"]`).classList.add('active');
            }, 3000);
        }

        function updateVoiceResults() {
            const confidence = Math.floor(Math.random() * 30) + 70;
            document.getElementById('voiceConfidence').textContent = confidence + '%';
            document.getElementById('voiceProgress').style.width = confidence + '%';
        }

        function updateAnalysisResults() {
            const stressLevel = Math.floor(Math.random() * 40) + 30;
            const emotions = ['Calm', 'Moderate Stress', 'Anxious', 'Relaxed', 'Concerned'];
            const randomEmotion = emotions[Math.floor(Math.random() * emotions.length)];
            
            document.getElementById('stressLevel').textContent = stressLevel + '%';
            document.getElementById('stressProgress').style.width = stressLevel + '%';
            document.getElementById('emotionalState').textContent = randomEmotion;
            
            // Add color coding based on stress level
            const stressElement = document.getElementById('stressLevel');
            if (stressLevel < 40) {
                stressElement.style.color = '#48bb78';
            } else if (stressLevel < 70) {
                stressElement.style.color = '#ed8936';
            } else {
                stressElement.style.color = '#e53e3e';
            }
        }

        // Initialize with some sample data
        setTimeout(() => {
            updateVoiceResults();
        }, 1000);
    </script>
</body>
</html>
